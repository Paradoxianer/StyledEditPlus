/****************************************/
/* OOfficeWindow based on BWindow class */
/* Created : 9/2/2007 - 20:44:21        */
/* Code Generated by MeTOS              */
/****************************************/

#include "OOfficeWindow.h"

#include "WorkView.h"
#include "StatusView.h"
#include "ColorPicker.h"
#include "ColorMenuItem.h"
#include "FontMenuItem.h"
#include "FontMenu.h"
#include "FormatToolBar.h"
#include "ColorButton.h"

#include "ScrollTab.h"
#include "Misc/Colors.h"
#include "Misc/Messages.h"

#include <MenuBar.h>
#include <PopUpMenu.h>
#include <Slider.h>
#include <Menu.h>
#include <MenuItem.h>
#include <Application.h>

#include <Locale.h>

/***** Constructor ****/
OOfficeWindow::OOfficeWindow(BRect frame,const char *title,window_look look,window_feel feel,uint32 flags,uint32 workspace)
: BWindow(frame,title,look,feel,flags,workspace)
{

	// Menus
	_findmenu = new BMenuItem("Find",NULL,0,2);
	_pastemenu = new BMenuItem("Paste",NULL,0,2);
	_cutmenu = new BMenuItem("Cut",NULL,0,2);
	_copymenu = new BMenuItem("Copy",NULL,0,2);
	_edit = new BMenu("Edit",B_ITEMS_IN_COLUMN);
	_quitmenu = new BMenuItem("Quit",NULL,0,2);
	
	_newmenu = new BMenu("New",B_ITEMS_IN_COLUMN);

	_docmenu    = new BMenuItem("Document",new BMessage(MESSAGE_MENU_NEW),'D');	
	_spreadmenu = new BMenuItem("Spreadsheet",new BMessage(MESSAGE_MENU_NEW),'H');	
	_presmenu   = new BMenuItem("Presentation",new BMessage(MESSAGE_MENU_NEW),'P');
		
	_aboutmenu = new BMenuItem("About",new BMessage(B_ABOUT_REQUESTED),'A');
	_file = new BMenu("File",B_ITEMS_IN_COLUMN);
	_toolbars = new BMenu("Toolbars",B_ITEMS_IN_COLUMN);	
	
	_menubar1 = new BMenuBar(BRect(Bounds().top, Bounds().left,406.00,497.00),"Bar");
	
	// Status
	_statusview = new StatusView(BRect(Bounds().left, Bounds().bottom - 20, Bounds().right ,Bounds().bottom),
	                             "StatusView",B_FOLLOW_LEFT_RIGHT | B_FOLLOW_BOTTOM ,B_WILL_DRAW);
	AddChild(_statusview);	
	
	
	float _x,_y;
	float _lastTop = 0;
	float _firstBottom = 0;
		
	_menubar1->GetPreferredSize(&_x, &_y);

	_lastTop += _y;    
	_firstBottom +=  _statusview->Bounds().Height();

	// ToolBar
	_ftoolbar = new FormatToolBar( BRect( Bounds().left, _lastTop , Bounds().right , _lastTop+35 ));
	_ftoolbar->SetViewColor(219, 219, 219, 0);

	AddChild(_ftoolbar);

	_lastTop += _ftoolbar->Bounds().Height();

	// work
	_tabView = new BTabView(BRect(Bounds().left,
	                                 Bounds().top + _lastTop , 
	                                 Bounds().right,
	                                 Bounds().bottom - _firstBottom), "tab_view"); 
	_tabView->SetTabWidth(B_WIDTH_FROM_WIDEST);
	AddChild(_tabView);

	/* Menu bar */
	AddChild(_menubar1);	

	_menubar1->AddItem(_file);
	_file->AddItem(_newmenu);
	_newmenu->AddItem(_docmenu);
	_newmenu->AddItem(_spreadmenu);
	_newmenu->AddItem(_presmenu);
	
	_file->AddItem(_aboutmenu);
	_file->AddItem(_quitmenu);
	_menubar1->AddItem(_edit);
	_edit->AddItem(_copymenu);
	_edit->AddItem(_cutmenu);
	_edit->AddItem(_pastemenu);
	_edit->AddItem(_findmenu);
	_menubar1->AddItem(_toolbars);
}

///***** Quit ****/
//
//void OOfficeWindow::Quit()
//{
//
//}

/***** MessageReceived ****/
void OOfficeWindow::MessageReceived(BMessage *message)
{
	BFont 	font;
	BRect   r;
	
	ScrollTab*	tab;
	WorkView*	wview;
	
	int32 l;
			    
	switch(message->what) {
			
		case MESSAGE_TAB_SELECTED:

			wview = getWorkView();
			wview->SetZoom(wview->GetZoom() * 100 );

		break;
		
		case MESSAGE_TAB_DESELECTED:

		break;
		
		case MESSAGE_MENU_NEW:

			r = _tabView->Bounds(); 
			// the selection fixs this
			//r.bottom -= _tabView->TabHeight() + B_H_SCROLL_BAR_HEIGHT + 2; 
  		    //r.right  -= B_V_SCROLL_BAR_WIDTH + 2;
		
			/* new word document */
            _workview = new WorkView(r, "WorkView", B_FOLLOW_ALL_SIDES, B_WILL_DRAW);        	                       

			/* new spreadsheet document */
			
			/* new presentation document */
	
			/* Add new tab */
		    tab = new ScrollTab();  
    		_tabView->AddTab(new BScrollView("new Document", _workview, B_FOLLOW_ALL_SIDES,B_WILL_DRAW, 
    		                                 true, true, B_PLAIN_BORDER ), tab);
    	    tab->SetLabel("new Document");
			
			_tabView->Invalidate();

			/* Set first tab as default */
			/**if ( _tabView->CountTabs() == 1 )
				_tabView->Select(tab);*/
		
		break;		

		/* Format Stuff */

		case MESSAGE_DEFAULT_COLOR_PICKER_DROP_COLOR:

			rgb_color *c;
	
			if (message && message->FindData("color", B_RGB_COLOR_TYPE, (const void **)&c, &l) == B_NO_ERROR)
			{
               	wview = (WorkView*)( ((BScrollView*)(_tabView->TabAt( _tabView->Selection() )->View()))->Target() );
                ((BTextView *)wview->_documentview)->SetFontAndColor(NULL, 0, &((const rgb_color &)*c));
                /* Ensures the correct change of the color */
                ((BTextView *)wview->_documentview)->Invalidate();
			}
		break;

		case MESSAGE_STYLE_SELECTED:

		    font_family* 	family;
			font_style*	 	style;

			if ( _tabView->CountTabs() > 0 )
			{
			
			//**	message->FindData("font", B_FONT_TYPE, (const void **)&family, &l);
		//**		message->FindData("style", B_FONT_TYPE, (const void **)&style, &l);		

				font.SetFamilyAndStyle(*family, *style);

				wview = (WorkView*)( ((BScrollView*)(_tabView->TabAt( _tabView->Selection() )->View()))->Target() );
				((BTextView *)wview->_documentview)->SetFontAndColor(&font, B_FONT_FAMILY_AND_STYLE);
			}

		break;

		case MESSAGE_SIZE_SELECTED:
			
			if ( _tabView->CountTabs() > 0 )
			{
				message->FindInt32("size", &l);				
				font.SetSize(l);
				wview = (WorkView*)( ((BScrollView*)(_tabView->TabAt( _tabView->Selection() )->View()))->Target() );
				((BTextView *)wview->_documentview)->SetFontAndColor(&font, B_FONT_SIZE);		
			}
		
		break;
		
		/* Another Stuff */
		case MESSAGE_ZOOM_SELECTED:
			/* Just if we really have a document */
			if ( _tabView->CountTabs() > 0 )
			{
				wview = (WorkView*)( ((BScrollView*)(_tabView->TabAt( _tabView->Selection() )->View()))->Target() );
				wview->SetZoom( _statusview->_zoomslider->Value() );
			}
			
		break;

		/* Application Stuff */		
		case B_ABOUT_REQUESTED:
		    be_app_messenger.SendMessage(B_ABOUT_REQUESTED);
		break;
	}

}

/***** FrameResized ****/
void OOfficeWindow::FrameResized(float new_width,float new_height)
{

//	WorkView*	wview;
//	BRect r = ((BScrollView*)(_tabView->TabAt( _tabView->Selection() )->View()))->Bounds();
//	BRect increment = Bounds() - BPoint(new_width, new_height);

//	for (int i = 0 ; i < _tabView->CountTabs() ; i++ )
//	{
//		wview = (WorkView*)( ((BScrollView*)(_tabView->TabAt( i )->View()))->Target() );	
//		r = _tabView->Bounds(); 
//		r.bottom -= _tabView->TabHeight() -1 ;//+ B_H_SCROLL_BAR_HEIGHT + 2; 
//      r.right  -= -1 ; //B_V_SCROLL_BAR_WIDTH + 2;
//		
//		if ( i != _tabView->Selection() ) {
//		
//		((BScrollView*)(_tabView->TabAt( i )->View()))->
//		                  ResizeBy( 10 , 10 );
//		
//		}

//	}
	_ftoolbar->Invalidate();	
}

/***** Zoom ****/
//void OOfficeWindow::Zoom(BPoint rec_position,float rec_width,float rec_height)
//{
//}

/***** QuitRequested ****/
bool OOfficeWindow::QuitRequested()
{

	be_app_messenger.SendMessage(B_QUIT_REQUESTED);
	return true;
}
